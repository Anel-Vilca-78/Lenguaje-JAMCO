
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN COLON DIVIDE ELSE EQUALS FUNC GREATER GREATEREQUAL IDENTIFIER IF LBRACE LESS LESSEQUAL LPAREN MAIN MINUS MOD NOT NOTEQUAL NUMBER OR PLUS RBRACE RPAREN SEMICOLON TIMES TRUE VAR VOID WHILEprogram : declaration_listdeclaration_list : declaration_list declaration\n                        | declarationdeclaration : var_declaration\n                   | func_declarationvar_declaration : VAR IDENTIFIER ASSIGN NUMBER SEMICOLONfunc_declaration : FUNC IDENTIFIER LPAREN RPAREN blockblock : LBRACE statement_list RBRACEstatement_list : statement_list statement\n                     | statementstatement : expression_statement\n                 | compound_statement\n                 | selection_statement\n                 | iteration_statementexpression_statement : expression SEMICOLON\n                            | SEMICOLONcompound_statement : LBRACE statement_list RBRACEselection_statement : IF LPAREN expression RPAREN statement ELSE statementiteration_statement : WHILE LPAREN expression RPAREN statementexpression : IDENTIFIER ASSIGN expression\n                  | simple_expressionsimple_expression : additive_expression relop additive_expression\n                         | additive_expressionadditive_expression : additive_expression addop term\n                           | termterm : term mulop factor\n            | factorrelop : LESS\n             | LESSEQUAL\n             | GREATER\n             | GREATEREQUAL\n             | EQUALS\n             | NOTEQUALaddop : PLUS\n             | MINUSmulop : TIMES\n             | DIVIDEfactor : LPAREN expression RPAREN\n              | IDENTIFIER\n              | NUMBER'
    
_lr_action_items = {'VAR':([0,2,3,4,5,8,15,16,37,],[6,6,-3,-4,-5,-2,-6,-7,-8,]),'FUNC':([0,2,3,4,5,8,15,16,37,],[7,7,-3,-4,-5,-2,-6,-7,-8,]),'$end':([1,2,3,4,5,8,15,16,37,],[0,-1,-3,-4,-5,-2,-6,-7,-8,]),'IDENTIFIER':([6,7,17,18,19,20,21,22,23,24,26,28,36,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,66,67,69,70,71,],[9,10,30,30,30,-10,-11,-12,-13,-14,-16,30,30,-9,-15,30,30,30,63,63,-28,-29,-30,-31,-32,-33,-34,-35,63,-36,-37,-17,30,30,-19,30,-18,]),'ASSIGN':([9,30,],[11,43,]),'LPAREN':([10,17,18,19,20,21,22,23,24,26,27,28,29,36,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,66,67,69,70,71,],[12,28,28,28,-10,-11,-12,-13,-14,-16,40,28,42,28,-9,-15,28,28,28,28,28,-28,-29,-30,-31,-32,-33,-34,-35,28,-36,-37,-17,28,28,-19,28,-18,]),'NUMBER':([11,17,18,19,20,21,22,23,24,26,28,36,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,66,67,69,70,71,],[13,35,35,35,-10,-11,-12,-13,-14,-16,35,35,-9,-15,35,35,35,35,35,-28,-29,-30,-31,-32,-33,-34,-35,35,-36,-37,-17,35,35,-19,35,-18,]),'RPAREN':([12,30,31,32,33,34,35,41,58,59,60,61,62,63,64,65,],[14,-39,-21,-23,-25,-27,-40,59,66,-38,67,-20,-22,-39,-24,-26,]),'SEMICOLON':([13,17,18,19,20,21,22,23,24,25,26,30,31,32,33,34,35,36,38,39,57,59,61,62,63,64,65,66,67,69,70,71,],[15,26,26,26,-10,-11,-12,-13,-14,39,-16,-39,-21,-23,-25,-27,-40,26,-9,-15,-17,-38,-20,-22,-39,-24,-26,26,26,-19,26,-18,]),'LBRACE':([14,17,18,19,20,21,22,23,24,26,36,38,39,57,66,67,69,70,71,],[17,18,18,18,-10,-11,-12,-13,-14,-16,18,-9,-15,-17,18,18,-19,18,-18,]),'IF':([17,18,19,20,21,22,23,24,26,36,38,39,57,66,67,69,70,71,],[27,27,27,-10,-11,-12,-13,-14,-16,27,-9,-15,-17,27,27,-19,27,-18,]),'WHILE':([17,18,19,20,21,22,23,24,26,36,38,39,57,66,67,69,70,71,],[29,29,29,-10,-11,-12,-13,-14,-16,29,-9,-15,-17,29,29,-19,29,-18,]),'RBRACE':([19,20,21,22,23,24,26,36,38,39,57,69,71,],[37,-10,-11,-12,-13,-14,-16,57,-9,-15,-17,-19,-18,]),'ELSE':([21,22,23,24,26,39,57,68,69,71,],[-11,-12,-13,-14,-16,-15,-17,70,-19,-18,]),'TIMES':([30,33,34,35,59,63,64,65,],[-39,55,-27,-40,-38,-39,55,-26,]),'DIVIDE':([30,33,34,35,59,63,64,65,],[-39,56,-27,-40,-38,-39,56,-26,]),'LESS':([30,32,33,34,35,59,63,64,65,],[-39,46,-25,-27,-40,-38,-39,-24,-26,]),'LESSEQUAL':([30,32,33,34,35,59,63,64,65,],[-39,47,-25,-27,-40,-38,-39,-24,-26,]),'GREATER':([30,32,33,34,35,59,63,64,65,],[-39,48,-25,-27,-40,-38,-39,-24,-26,]),'GREATEREQUAL':([30,32,33,34,35,59,63,64,65,],[-39,49,-25,-27,-40,-38,-39,-24,-26,]),'EQUALS':([30,32,33,34,35,59,63,64,65,],[-39,50,-25,-27,-40,-38,-39,-24,-26,]),'NOTEQUAL':([30,32,33,34,35,59,63,64,65,],[-39,51,-25,-27,-40,-38,-39,-24,-26,]),'PLUS':([30,32,33,34,35,59,62,63,64,65,],[-39,52,-25,-27,-40,-38,52,-39,-24,-26,]),'MINUS':([30,32,33,34,35,59,62,63,64,65,],[-39,53,-25,-27,-40,-38,53,-39,-24,-26,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,],[2,]),'declaration':([0,2,],[3,8,]),'var_declaration':([0,2,],[4,4,]),'func_declaration':([0,2,],[5,5,]),'block':([14,],[16,]),'statement_list':([17,18,],[19,36,]),'statement':([17,18,19,36,66,67,70,],[20,20,38,38,68,69,71,]),'expression_statement':([17,18,19,36,66,67,70,],[21,21,21,21,21,21,21,]),'compound_statement':([17,18,19,36,66,67,70,],[22,22,22,22,22,22,22,]),'selection_statement':([17,18,19,36,66,67,70,],[23,23,23,23,23,23,23,]),'iteration_statement':([17,18,19,36,66,67,70,],[24,24,24,24,24,24,24,]),'expression':([17,18,19,28,36,40,42,43,66,67,70,],[25,25,25,41,25,58,60,61,25,25,25,]),'simple_expression':([17,18,19,28,36,40,42,43,66,67,70,],[31,31,31,31,31,31,31,31,31,31,31,]),'additive_expression':([17,18,19,28,36,40,42,43,44,66,67,70,],[32,32,32,32,32,32,32,32,62,32,32,32,]),'term':([17,18,19,28,36,40,42,43,44,45,66,67,70,],[33,33,33,33,33,33,33,33,33,64,33,33,33,]),'factor':([17,18,19,28,36,40,42,43,44,45,54,66,67,70,],[34,34,34,34,34,34,34,34,34,34,65,34,34,34,]),'relop':([32,],[44,]),'addop':([32,62,],[45,45,]),'mulop':([33,64,],[54,54,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','sd3.py',116),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','sd3.py',120),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','sd3.py',121),
  ('declaration -> var_declaration','declaration',1,'p_declaration','sd3.py',128),
  ('declaration -> func_declaration','declaration',1,'p_declaration','sd3.py',129),
  ('var_declaration -> VAR IDENTIFIER ASSIGN NUMBER SEMICOLON','var_declaration',5,'p_var_declaration','sd3.py',133),
  ('func_declaration -> FUNC IDENTIFIER LPAREN RPAREN block','func_declaration',5,'p_func_declaration','sd3.py',137),
  ('block -> LBRACE statement_list RBRACE','block',3,'p_block','sd3.py',141),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','sd3.py',145),
  ('statement_list -> statement','statement_list',1,'p_statement_list','sd3.py',146),
  ('statement -> expression_statement','statement',1,'p_statement','sd3.py',153),
  ('statement -> compound_statement','statement',1,'p_statement','sd3.py',154),
  ('statement -> selection_statement','statement',1,'p_statement','sd3.py',155),
  ('statement -> iteration_statement','statement',1,'p_statement','sd3.py',156),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','sd3.py',160),
  ('expression_statement -> SEMICOLON','expression_statement',1,'p_expression_statement','sd3.py',161),
  ('compound_statement -> LBRACE statement_list RBRACE','compound_statement',3,'p_compound_statement','sd3.py',168),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement','sd3.py',172),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement','sd3.py',176),
  ('expression -> IDENTIFIER ASSIGN expression','expression',3,'p_expression','sd3.py',180),
  ('expression -> simple_expression','expression',1,'p_expression','sd3.py',181),
  ('simple_expression -> additive_expression relop additive_expression','simple_expression',3,'p_simple_expression','sd3.py',188),
  ('simple_expression -> additive_expression','simple_expression',1,'p_simple_expression','sd3.py',189),
  ('additive_expression -> additive_expression addop term','additive_expression',3,'p_additive_expression','sd3.py',196),
  ('additive_expression -> term','additive_expression',1,'p_additive_expression','sd3.py',197),
  ('term -> term mulop factor','term',3,'p_term','sd3.py',204),
  ('term -> factor','term',1,'p_term','sd3.py',205),
  ('relop -> LESS','relop',1,'p_relop','sd3.py',212),
  ('relop -> LESSEQUAL','relop',1,'p_relop','sd3.py',213),
  ('relop -> GREATER','relop',1,'p_relop','sd3.py',214),
  ('relop -> GREATEREQUAL','relop',1,'p_relop','sd3.py',215),
  ('relop -> EQUALS','relop',1,'p_relop','sd3.py',216),
  ('relop -> NOTEQUAL','relop',1,'p_relop','sd3.py',217),
  ('addop -> PLUS','addop',1,'p_addop','sd3.py',221),
  ('addop -> MINUS','addop',1,'p_addop','sd3.py',222),
  ('mulop -> TIMES','mulop',1,'p_mulop','sd3.py',226),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','sd3.py',227),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','sd3.py',231),
  ('factor -> IDENTIFIER','factor',1,'p_factor','sd3.py',232),
  ('factor -> NUMBER','factor',1,'p_factor','sd3.py',233),
]
